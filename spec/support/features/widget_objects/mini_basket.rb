module MyApp
  module Test
    module ComponentObject
      class MiniBasket < CapybaraObjects::ComponentObject
        ctype "mini_basket"
        locator :css, "[data-behavior='mini_basket']"

        # Detects if the mini basket contains a badge showing how many items are in the basket
        # Note that here, we use 'find' which raises an exception if not found, so we must rescue from
        # that and return false.
        # This does mean that the code will wait for the badge to appear for an amount of time
        # (as defined in Capybara.default_wait_time).  This is to allow for the basket being
        # dynamic in nature such as generated by javascript using AJAX etc...
        def has_badge?
          badge_node.present?
        rescue ::Capybara::ElementNotFound
          false
        end

        # Returns the text from the badge in the basket.
        # The badge is used as an indicator to the user
        # that they have something in their basket
        # @return [String] The badge text
        def badge_text
          badge_node.text
        end

        # Returns the text from the basket tooltip which
        # generally shows when the user hovers over the
        # mini basket.
        # @return [String] The basket tooltip text
        def basket_tooltip_text
          basket_tooltip_node.text
        end

        # The node for the basket tooltip
        # @return [Capybara::Node] The capybara node for the basket tooltip
        def basket_tooltip_node
          scoped_find(:css, "[data-behavior='mini_basket_contents']")
        end

        def basket_tooltip
          get_component("mini_basket_tooltip")
        end

        def expand!
          expand_button_node.click
        end

        private

        def badge_node
          scoped_find(:css, "[data-attribute='basket_count']")
        end

        def expand_button_node
          scoped_find(:css, "[data-action='expand']")
        end
      end
    end
  end
end